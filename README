# Kubernetes Apache Web Application

## Overview
This project deploys an Apache web application on an Amazon EKS (Elastic Kubernetes Service) cluster. It demonstrates containerization, Kubernetes deployment, and service exposure using a LoadBalancer.

## Prerequisites
1. Containerize (Dockerize) our usual lovely Apache application.
2. Push the Docker image to your DockerHub account.

## Kubernetes Setup

### 1. Create EKS Cluster
Deploy an EKS cluster named "playground-cluster" with 3 nodes in the us-west-2 region.

### 2. Deploy Apache Application
1. Create a Deployment for our Apache application with five (5) replicas of your pod.
2. Create a Load Balancer service to expose our Apache application on port 80.

### 3. Repository Setup
Create a GitHub repository called "kubernetes-apache-webapp" and upload your Dockerfile alongside all your Kubernetes manifest files.

## Project Structure
- `Dockerfile`: Instructions for building the Apache application Docker image.
- `kubernetes-manifests/`:
  - `deployment.yaml`: Kubernetes deployment manifest
  - `service.yaml`: Kubernetes service manifest for LoadBalancer
- `index.html`: Sample content for the Apache web server

## Verification and Submission
1. Use `kubectl describe service` to view service details
2. Use `kubectl describe pod` to view pod details
3. Capture a screenshot of your running application

## Additional Notes
- Ensure proper setup of `kubectl` and `eksctl`
- Verify AWS credentials for EKS cluster creation

This README provides an overview of the Kubernetes homework assignment, outlining the key steps and requirements without including any placeholders or content that would need to be changed when pushed to GitHub.
